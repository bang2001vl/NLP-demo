
from cmath import log
from pyvi import ViTokenizer, ViPosTagger
from joblib import load
from flask import Flask, request
from os.path import abspath
import re, string, codecs, json

path_replace_list = abspath("../input/customdata/replace-list.json")
with codecs.open(path_replace_list, "r", encoding="UTF-8") as f:
    replace_json = json.load(f)

# H√†m ti·ªÅn x·ª≠ l√≠ text
def normalize_text(text):
    # Remove c√°c k√Ω t·ª± k√©o d√†i: vd: ƒë·∫πppppppp -> ƒë·∫πp
    text = re.sub(
        r"([A-Z])\1+", lambda m: m.group(1).upper(), text, flags=re.IGNORECASE
    )
    
    # Remove c√°c kho·∫£ng tr·∫Øng l·∫∑p l·∫°i: vd: "a   a" => "a a"
    text = re.sub(' +', ' ', text)
    text = text.strip()

    # Chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng
    text = text.lower()

    # Thay m·ªôt s·ªë t·ª´ l√≥ng, t·ª´ vi·∫øt t·∫Øt, icons, ti·∫øng anh th√†nh t·ª´ c√≥ nghƒ©a
    for key in replace_json:
        text = text.replace(key, replace_json[key])

    # Chuy·ªÉn d·∫•u c√¢u th√†nh space vd: a,b.c -> a b c
    translator = str.maketrans(string.punctuation, " " * len(string.punctuation))
    text = text.translate(translator)

    # Chia c√¢u th√†nh c√°c token vd: "Tr∆∞·ªùng ƒë·∫°i h·ªçc b√°ch khoa h√† n·ªôi" -> ['Tr∆∞·ªùng', 'ƒë·∫°i_h·ªçc', 'b√°ch_khoa', 'h√†_n·ªôi']
    tokens, tags = ViPosTagger.postagging(ViTokenizer.tokenize(text))

    # Gom c√¢u l·∫°i
    text = " ".join(tokens)
    
    # remove n·ªët nh·ªØng k√Ω t·ª± th·ª´a th√£i
    text = text.replace('"', " ")
    text = text.replace("Ô∏è", "")
    text = text.replace("üèª", "")

    return text

# Load model
clf = load('./model.joblib') 
# X_test = ["Th·∫±ng n√†y l√† l·ª´a ƒë·∫£o", "Ch∆∞∆°ng tr√¨nh hay l·∫Øm", "Ch∆∞∆°ng tr√¨nh kh√¥ng h·ªØu √≠ch", "Ch·∫≥ng ƒë√°ng ƒë·ªÉ l√†m"]

# BUILD API SERVER
app = Flask(__name__)

# Predict route
@app.route('/comment', methods=['POST'])
def predict_comment():
    try: 
        comments = list(request.get_json()["comments"])
        temp = []
        for x in comments:
            temp.append(normalize_text(x))
        rs = {}
        rs["result"] = True
        rs["received_comments"] = comments
        probabilities = clf.predict_proba(temp)
        rs["probabilities"] = probabilities.tolist()
        return rs
    except:
        rs = {}
        rs["result"] = False
        rs["errorMessage"] = "Catch exception on server"

# Testing route
@app.route('/test', methods=['GET'])
def get_test():
    return "Hello, world"
app.run('0.0.0.0', 5050)